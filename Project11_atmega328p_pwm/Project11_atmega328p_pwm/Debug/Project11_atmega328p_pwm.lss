
Project11_atmega328p_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085c  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000701  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034d  00000000  00000000  000011b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d8  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <button_init>:

	return 0;
}

void button_init(){
	DDRB &= (~(1<<DDB1)) & (~(1<<DDB0));  // Set PB1 and PB0 as input
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 7f       	andi	r24, 0xFC	; 252
  84:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PB1) | (1<<PB0);         // Enable pull-up resistors
  86:	85 b1       	in	r24, 0x05	; 5
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	85 b9       	out	0x05, r24	; 5
  8c:	08 95       	ret

0000008e <check_button>:
}

int check_button(){
	int x = 0;
	
	if (!(PINB & (1 << PINB0))) {  // Check if button PB0 is pressed
  8e:	18 99       	sbic	0x03, 0	; 3
  90:	0c c0       	rjmp	.+24     	; 0xaa <check_button+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	81 ee       	ldi	r24, 0xE1	; 225
  96:	94 e0       	ldi	r25, 0x04	; 4
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <check_button+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <check_button+0x14>
  a2:	00 00       	nop
		_delay_ms(100);              // Debounce delay
		x = -1;                    // Decrease PWM when PB0 is pressed
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	9f ef       	ldi	r25, 0xFF	; 255
  a8:	02 c0       	rjmp	.+4      	; 0xae <check_button+0x20>
	DDRB &= (~(1<<DDB1)) & (~(1<<DDB0));  // Set PB1 and PB0 as input
	PORTB |= (1<<PB1) | (1<<PB0);         // Enable pull-up resistors
}

int check_button(){
	int x = 0;
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
	if (!(PINB & (1 << PINB0))) {  // Check if button PB0 is pressed
		_delay_ms(100);              // Debounce delay
		x = -1;                    // Decrease PWM when PB0 is pressed
	}
	
	if (!(PINB & (1 << PINB1))) {  // Check if button PB1 is pressed
  ae:	19 99       	sbic	0x03, 1	; 3
  b0:	0b c0       	rjmp	.+22     	; 0xc8 <check_button+0x3a>
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	81 ee       	ldi	r24, 0xE1	; 225
  b6:	94 e0       	ldi	r25, 0x04	; 4
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <check_button+0x2a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <check_button+0x34>
  c2:	00 00       	nop
		_delay_ms(100);              // Debounce delay
		x = 1;                     // Increase PWM when PB1 is pressed
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return x;
}
  c8:	08 95       	ret

000000ca <main>:
#include <avr/io.h>

static inline void motor_init_pwm()
{
	// Set up Timer0 for PWM
	TCCR0A |= (1<<WGM01) | (1<<WGM00); // Waveform Generation Mode
  ca:	84 b5       	in	r24, 0x24	; 36
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) | (1<<CS00);   // Clock Select
  d0:	85 b5       	in	r24, 0x25	; 37
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<COM0A1);             // Non-inverting mode
  d6:	84 b5       	in	r24, 0x24	; 36
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	84 bd       	out	0x24, r24	; 36
	DDRD |= (1<<DDD6);                 // OC0A is output (PWM on PD6)
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	8a b9       	out	0x0a, r24	; 10
	
	// Set PD4 and PD5 as output for motor direction control
	DDRD |= (1<<DDD4) | (1<<DDD5);     // IN1 (PD4) and IN2 (PD5) as output
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	80 63       	ori	r24, 0x30	; 48
  e6:	8a b9       	out	0x0a, r24	; 10
int check_button();

int main()
{
	motor_init_pwm();
	button_init();
  e8:	0e 94 40 00 	call	0x80	; 0x80 <button_init>
	//Encoder
	//lcd
	
	int button_value = 0;
	int pwm = 250;
  ec:	ca ef       	ldi	r28, 0xFA	; 250
  ee:	d0 e0       	ldi	r29, 0x00	; 0

	while (1)
	{
		button_value = check_button();
  f0:	0e 94 47 00 	call	0x8e	; 0x8e <check_button>
		pwm += 10 * button_value;  // Adjust PWM based on button input
  f4:	9c 01       	movw	r18, r24
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	82 0f       	add	r24, r18
 108:	93 1f       	adc	r25, r19
 10a:	c8 0f       	add	r28, r24
 10c:	d9 1f       	adc	r29, r25
		// Limit PWM within the range of 0 to 255
		if (pwm > 255) {
 10e:	cf 3f       	cpi	r28, 0xFF	; 255
 110:	d1 05       	cpc	r29, r1
 112:	09 f0       	breq	.+2      	; 0x116 <main+0x4c>
 114:	1c f4       	brge	.+6      	; 0x11c <main+0x52>
			pwm = 255;
			} else if (pwm < 0) {
 116:	dd 23       	and	r29, r29
 118:	34 f4       	brge	.+12     	; 0x126 <main+0x5c>
 11a:	03 c0       	rjmp	.+6      	; 0x122 <main+0x58>
	{
		button_value = check_button();
		pwm += 10 * button_value;  // Adjust PWM based on button input
		// Limit PWM within the range of 0 to 255
		if (pwm > 255) {
			pwm = 255;
 11c:	cf ef       	ldi	r28, 0xFF	; 255
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <main+0x5c>
			} else if (pwm < 0) {
			pwm = 0;
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 e0       	ldi	r29, 0x00	; 0
	OCR0A = value; // Set PWM value
}

static inline void set_motor(int x)
{
	if (x > 0)
 126:	1c 16       	cp	r1, r28
 128:	1d 06       	cpc	r1, r29
 12a:	44 f4       	brge	.+16     	; 0x13c <main+0x72>
	{
		PORTD |= (1<<PORTD4);  // IN1 = 1
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5); // IN2 = 0
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	8f 7d       	andi	r24, 0xDF	; 223
 136:	8b b9       	out	0x0b, r24	; 11
	DDRD |= (1<<DDD4) | (1<<DDD5);     // IN1 (PD4) and IN2 (PD5) as output
}

static inline void motor_set_pwm(uint8_t value)
{
	OCR0A = value; // Set PWM value
 138:	c7 bd       	out	0x27, r28	; 39
 13a:	da cf       	rjmp	.-76     	; 0xf0 <main+0x26>
	{
		PORTD |= (1<<PORTD4);  // IN1 = 1
		PORTD &= ~(1<<PORTD5); // IN2 = 0
		motor_set_pwm(x);      // Set PWM to positive value
	}
	else if (x < 0)
 13c:	dd 23       	and	r29, r29
 13e:	54 f4       	brge	.+20     	; 0x154 <main+0x8a>
	{
		PORTD &= ~(1<<PORTD4); // IN1 = 0
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<PORTD5);  // IN2 = 1
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	80 62       	ori	r24, 0x20	; 32
 14a:	8b b9       	out	0x0b, r24	; 11
		motor_set_pwm(-x);     // Set PWM to positive value (absolute of x)
 14c:	8c 2f       	mov	r24, r28
 14e:	81 95       	neg	r24
	DDRD |= (1<<DDD4) | (1<<DDD5);     // IN1 (PD4) and IN2 (PD5) as output
}

static inline void motor_set_pwm(uint8_t value)
{
	OCR0A = value; // Set PWM value
 150:	87 bd       	out	0x27, r24	; 39
 152:	ce cf       	rjmp	.-100    	; 0xf0 <main+0x26>
		motor_set_pwm(-x);     // Set PWM to positive value (absolute of x)
	}
	else
	{
	
		PORTD &= ~(1<<PORTD4); // IN1 = 0
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	8f 7e       	andi	r24, 0xEF	; 239
 158:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5); // IN2 = 0
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	8f 7d       	andi	r24, 0xDF	; 223
 15e:	8b b9       	out	0x0b, r24	; 11
	DDRD |= (1<<DDD4) | (1<<DDD5);     // IN1 (PD4) and IN2 (PD5) as output
}

static inline void motor_set_pwm(uint8_t value)
{
	OCR0A = value; // Set PWM value
 160:	17 bc       	out	0x27, r1	; 39
 162:	c6 cf       	rjmp	.-116    	; 0xf0 <main+0x26>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
